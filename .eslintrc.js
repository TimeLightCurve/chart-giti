module.exports = {
	root: true,
	extends: ['./.eslintrc.jest.js', 'prettier'],
	parser: '@typescript-eslint/parser',
	parserOptions: {
		tsconfigRootDir: __dirname,
		project: './tsconfig.eslint.json',
	},
	env: {
		browser: true,
		es6: true,
		jest: true,
		node: true,
	},
	ignorePatterns: [
		'./dist',
		'./node_modules',
		'webpack.build.config.js',
		'webpack.dev.config.js',
		'webpack.test.config.js',
	],
	plugins: ['@typescript-eslint', 'eslint-plugin-node'],
	rules: {
		// ---> typescript rules
		'@typescript-eslint/adjacent-overload-signatures': 'off',
		'@typescript-eslint/array-type': 'off',
		'@typescript-eslint/explicit-member-accessibility': 'off',
		'@typescript-eslint/indent': 'off',
		'@typescript-eslint/interface-name-prefix': 'off',
		'@typescript-eslint/member-ordering': 'off',
		'@typescript-eslint/consistent-type-assertions': 'error',
		'@typescript-eslint/no-empty-interface': 'off',
		'@typescript-eslint/no-explicit-any': 'off',
		'@typescript-eslint/no-for-in-array': 'off',
		'@typescript-eslint/no-inferrable-types': 'off',
		'@typescript-eslint/no-magic-numbers': 'off',
		'@typescript-eslint/no-namespace': ['error', { allowDeclarations: true }],
		'@typescript-eslint/no-parameter-properties': 'off',
		'@typescript-eslint/no-require-imports': 'error',
		'@typescript-eslint/no-var-requires': 'error',
		'@typescript-eslint/triple-slash-reference': ['error', { path: 'never' }],
		'@typescript-eslint/prefer-for-of': 'warn',
		'@typescript-eslint/prefer-function-type': 'off',
		'@typescript-eslint/prefer-interface': 'off',
		'@typescript-eslint/prefer-namespace-keyword': 'error',
		'@typescript-eslint/unified-signatures': 'error',
		'@typescript-eslint/naming-convention': 'off',
		'@typescript-eslint/restrict-template-expressions': [
			'error',
			{
				allowNumber: true,
				allowBoolean: true,
			},
		],
		'@typescript-eslint/promise-function-async': 'off',
		'@typescript-eslint/restrict-plus-operands': 'off',
		'@typescript-eslint/strict-boolean-expressions': 'off',
		'@typescript-eslint/typedef': [
			'error',
			{ propertyDeclaration: true, arrowParameter: false, memberVariableDeclaration: false, parameter: false },
		],

		'@typescript-eslint/no-non-null-assertion': 'error',
		'@typescript-eslint/ban-types': [
			'error',
			{
				types: {
					Function: 'Use () => void instead',
				},
			},
		],
		'@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
		'@typescript-eslint/no-unused-vars': 'error',
		'@typescript-eslint/no-redeclare': ['error'],
		// --->

		// ---> core rules
		'spaced-comment': 'off',
		'capitalized-comments': 'off',
		'comma-dangle': 'off',
		complexity: 'off',
		curly: 'error',
		'default-case': 'off',
		'dot-notation': 'off',
		'eol-last': 'off',
		eqeqeq: 'error',
		'guard-for-in': 'error',
		indent: 'off',
		'linebreak-style': 'off',
		'max-classes-per-file': 'off',
		'max-lines': 'off',
		'newline-per-chained-call': 'off',
		'no-bitwise': 'error',
		'no-caller': 'error',
		'no-cond-assign': 'error',
		'no-debugger': 'error',
		'no-duplicate-case': 'error',
		'no-empty': 'off',
		'no-empty-functions': 'off',
		'no-eval': 'error',
		'no-extra-semi': 'off',
		'no-fallthrough': 'off',
		'no-invalid-this': 'off',
		'no-irregular-whitespace': 'off',
		'no-magic-numbers': 'off',
		'no-new-wrappers': 'error',
		'no-redeclare': 'off',
		'no-shadow': 'off',
		'no-throw-literal': 'error',
		'no-unsafe-finally': 'error',
		'no-unused-expressions': ['error', { allowShortCircuit: true, allowTernary: true, allowTaggedTemplates: true }],
		'no-unused-labels': 'warn',
		'no-var': 'error',
		'no-void': 'off',
		'no-undef': 'error',
		'object-shorthand': 'error',
		'one-var': ['error', 'never'],
		'prefer-const': 'error',
		radix: 'warn',
		'sort-keys': 'off',
		'use-isnan': 'error',
		'no-new-func': 'error',
		'no-restricted-syntax': [
			// casts are NOT ALLOWED!
			'error',
			"TSAsExpression[typeAnnotation.typeName.name!='const']",
		],
		// --->

		// ---> node rules
		'node/no-restricted-import': [
			'error',
			[
				{
					name: ['fp-ts', 'fp-ts/**/*'],
					message: 'NO FP-TS IN CHART-CORE!!!!!!',
				},
				{
					name: ['../modules/**/*'],
					message: "Core modules shouldn't depend on optional modules",
				},
			],
		],
		// --->
	},
	overrides: [
		{
			files: ['*.ts'],
			rules: {
				'no-restricted-imports': [
					'error',
					{
						paths: [
							{
								name: 'rxjs',
								importNames: [
									'audit',
									'auditTime',
									'buffer',
									'bufferCount',
									'bufferTime',
									'bufferToggle',
									'bufferWhen',
									'catchError',
									'combineAll',
									'combineLatestAll',
									'combineLatestWith',
									'concat',
									'concatAll',
									'concatMap',
									'concatMapTo',
									'concatWith',
									'connect',
									'ConnectConfig',
									'count',
									'debounce',
									'debounceTime',
									'defaultIfEmpty',
									'delay',
									'delayWhen',
									'dematerialize',
									'distinct',
									'distinctUntilChanged',
									'distinctUntilKeyChanged',
									'elementAt',
									'endWith',
									'every',
									'exhaust',
									'exhaustAll',
									'exhaustMap',
									'expand',
									'filter',
									'finalize',
									'find',
									'findIndex',
									'first',
									'groupBy',
									'BasicGroupByOptions',
									'GroupByOptionsWithElement',
									'ignoreElements',
									'isEmpty',
									'last',
									'map',
									'mapTo',
									'materialize',
									'max',
									'mergeAll',
									'flatMap',
									'mergeMap',
									'mergeMapTo',
									'mergeScan',
									'mergeWith',
									'min',
									'multicast',
									'observeOn',
									'onErrorResumeNext',
									'pairwise',
									'partition',
									'pluck',
									'publish',
									'publishBehavior',
									'publishLast',
									'publishReplay',
									'race',
									'raceWith',
									'reduce',
									'repeat',
									'RepeatConfig',
									'repeatWhen',
									'retry',
									'RetryConfig',
									'retryWhen',
									'refCount',
									'sample',
									'sampleTime',
									'scan',
									'sequenceEqual',
									'share',
									'ShareConfig',
									'shareReplay',
									'ShareReplayConfig',
									'single',
									'skip',
									'skipLast',
									'skipUntil',
									'skipWhile',
									'startWith',
									'subscribeOn',
									'switchAll',
									'switchMap',
									'switchMapTo',
									'switchScan',
									'take',
									'takeLast',
									'takeUntil',
									'takeWhile',
									'tap',
									'throttle',
									'ThrottleConfig',
									'throttleTime',
									'throwIfEmpty',
									'timeInterval',
									'timeout',
									'TimeoutConfig',
									'TimeoutInfo',
									'timeoutWith',
									'timestamp',
									'toArray',
									'window',
									'windowCount',
									'windowTime',
									'windowToggle',
									'windowWhen',
									'withLatestFrom',
									'zipAll',
									'zipWith',
								],
								message: "Import RxJS operators from 'rxjs/operators'.",
							},
						],
					},
				],
			},
		},
	],
};
